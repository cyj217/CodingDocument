from pymoo.core.problem import Problem
from pymoo.algorithms.moo.nsga2 import NSGA2
from pymoo.optimize import minimize
from pymoo.visualization.scatter import Scatter
from pymoo.core.variable import Real, Integer
import numpy as np

class MyProblem(Problem):
    def __init__(self):
        super().__init__(n_var=9, 
                         n_obj=3, 
                         n_constr=1, 
                         xl=np.array([20, 5, 4, 400, 20, 5, 3, 400, 20]),
                         xu=np.array([35, 12, 6, 1000, 35, 9, 6, 1000, 40]),
                         variable_type=[Real(), Real(), Integer(), Real(), Real(), Real(), Integer(), Real(), Real()]
                         )

    def _evaluate(self, x, out, *args, **kwargs):
        f1 = 0.06 * x[:, 2] * x[:, 3] * x[:, 8] + 0.06 * x[:, 6] * x[:, 7] * x[:, 8]
        f2 = x[:, 8]
        f3 = -65.69373530121288 + 1.6182086553566373 * x[:, 0] + 0.4169086387826928 * x[:, 1] + 0.649953394006219 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) + 0.005267497856559894 * x[:, 3] + -0.06255909370700218 * x[:, 4] + -0.15107587955875362 * x[:, 5] + 0.42789204836461253 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + 0.04628483859049453 * x[:, 7] + 0.8639476684929472 * x[:, 8] + -0.015635253049538143 * x[:, 0] * x[:, 0] + -0.02281118646051985 * x[:, 0] * x[:, 1] + -0.015029511434429708 * x[:, 0] * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) + 0.00036988369379445645 * x[:, 0] * x[:, 3] + 0.006696089507989978 * x[:, 0] * x[:, 4] + 0.013339730470286306 * x[:, 0] * x[:, 5] + -0.006618297244312584 * x[:, 0] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + -0.00028577931860748534 * x[:, 0] * x[:, 7] + -0.002030489270892358 * x[:, 0] * x[:, 8] + 0.047236791927227365 * x[:, 1] * x[:, 1] + -0.007492488209215346 * x[:, 1] * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) + -0.0007782254222114711 * x[:, 1] * x[:, 3] + 0.0030930258078801596 * x[:, 1] * x[:, 4] + -0.03290661486841164 * x[:, 1] * x[:, 5] + -0.00043078518176862743 * x[:, 1] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + -9.285299146966075e-05 * x[:, 1] * x[:, 7] + 0.0017188672248458423 * x[:, 1] * x[:, 8] + -0.0006753306140968515 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) + 5.242236332633418e-05 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 3] + -0.004226982160198713 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 4] + 0.01155414829330783 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 5] + -0.00157831906214035 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + -0.00010608413198610195 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 7] + -0.0012554826068063088 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 8] + 1.427675608844936e-07 * x[:, 3] * x[:, 3] + 1.4224875000162784e-05 * x[:, 3] * x[:, 4] + -0.00011438887522257496 * x[:, 3] * x[:, 5] + -4.021339534462237e-05 * x[:, 3] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + -8.299633281055874e-06 * x[:, 3] * x[:, 7] + -6.531981322824287e-05 * x[:, 3] * x[:, 8] + 0.0049444139825912115 * x[:, 4] * x[:, 4] + 0.004012982363619633 * x[:, 4] * x[:, 5] + -0.0059705045320088 * x[:, 4] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + 6.975244422627314e-05 * x[:, 4] * x[:, 7] + -0.0011069596450863223 * x[:, 4] * x[:, 8] + -0.0008628563799643436 * x[:, 5] * x[:, 5] + -0.0024325608463119444 * x[:, 5] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + -0.00023464847498838592 * x[:, 5] * x[:, 7] + -0.0012239881547472936 * x[:, 5] * x[:, 8] + -0.0009489541609032925 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + 2.3631001661139628e-05 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) * x[:, 7] + 0.00070056651411321 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) * x[:, 8] + 5.520835004097294e-06 * x[:, 7] * x[:, 7] + -2.9682487258098078e-05 * x[:, 7] * x[:, 8] + -0.009792399777627206 * x[:, 8] * x[:, 8]
        g = 935.98964725901897 - 0.013538728942482557 * x[:, 0] + 0.8021555651285219 * x[:, 1] - 2.31461158859571 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) - 0.34888123618349576 * x[:, 3] - 1.0015743742718906 * x[:, 4] + 6.408123135775262 * x[:, 5] - 0.06402379927919208 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) - 0.9954197090048814 * x[:, 7] - 14.684247994335902 * x[:, 8] - 6.14119116968629e-06 * x[:, 0] * x[:, 0] - 0.06028840477505551 * x[:, 0] * x[:, 1] + 0.022303630657638403 * x[:, 0] * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) - 0.0003393066276112123 * x[:, 0] * x[:, 3] + 0.0022882866326153183 * x[:, 0] * x[:, 4] - 0.04625452089589313 * x[:, 0] * x[:, 5] - 0.002796553845474784 * x[:, 0] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + 0.00016909271264526488 * x[:, 0] * x[:, 7] + 0.00831677960311284 * x[:, 0] * x[:, 8] + 0.016068245547147045 * x[:, 1] * x[:, 1] + 0.05003471433709873 * x[:, 1] * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) + 0.002184539754952433 * x[:, 1] * x[:, 3] + 0.014698844066333226 * x[:, 1] * x[:, 4] - 0.007624084884847518 * x[:, 1] * x[:, 5] - 0.004184058645558333 * x[:, 1] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) - 0.000835409143362463 * x[:, 1] * x[:, 7] + 0.0038455779784788285 * x[:, 1] * x[:, 8] + 0.016656065982318585 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) + 0.0002216719875300019 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 3] + 0.008197009208413 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 4] - 0.03432430468901351 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 5] + 0.0002876386630689537 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + 0.00021394225410412138 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 7] + 0.00754136878212136 * ((160 - x[:, 0] * 2) / (x[:, 2] - 1)) * x[:, 8] + 3.113356291239988e-05 * x[:, 3] * x[:, 3] + 0.0002315153602820974 * x[:, 3] * x[:, 4] + 0.0009182323416609961 * x[:, 3] * x[:, 5] - 4.971923156071867e-05 * x[:, 3] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) + 0.00017493479445593318 * x[:, 3] * x[:, 7] + 0.0012432978872798373 * x[:, 3] * x[:, 8] + 0.011170071577092155 * x[:, 4] * x[:, 4] - 0.006654576036150939 * x[:, 4] * x[:, 5] + 0.0007189835646677079 * x[:, 4] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) - 0.0005942461732251214 * x[:, 4] * x[:, 7] + 0.0020100234579322127 * x[:, 4] * x[:, 8] - 0.3036892859102304 * x[:, 5] * x[:, 5] - 0.0006436414464011664 * x[:, 5] * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) - 0.00018696298242648623 * x[:, 5] * x[:, 7] - 0.0034499337053868206 * x[:, 5] * x[:, 8] + 0.0016061913109384207 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) - 3.940402188651326e-05 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) * x[:, 7] - 0.00034841068526869634 * ((160 - x[:, 4] * 2) / (x[:, 6] - 1)) * x[:, 8] + 0.0002680047611804959 * x[:, 7] * x[:, 7] + 0.003988708085397974 * x[:, 7] * x[:, 8] + 0.15166235631019154 * x[:, 8] * x[:, 8]
        out["F"] = np.column_stack([f1, f2, f3])
        out["G"] = g

problem = MyProblem()

algorithm = NSGA2(pop_size=100, crossover_prob=0.9)

res = minimize(problem,
               algorithm,
               ('n_gen', 100),
               seed=1,
               verbose=False)

print("最优解：")
print(res.X)
print("最优目标函数值：")
print(res.F)

plot = Scatter()
plot.add(res.F, color="red")
plot.show()
